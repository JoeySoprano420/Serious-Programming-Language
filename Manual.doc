# **Serious Programming Language Manual**

Welcome to the **Serious Programming Language** manual. This guide provides a comprehensive overview of the language, its features, syntax, best practices, and how to get started with development. Serious is designed for developers who need powerful low-level control over their programs while still benefiting from high-level abstractions, performance optimizations, and security features.

---

### **Table of Contents**

1. **Introduction to Serious**
   - What is Serious?
   - Key Features
   - System Requirements
   - Setting Up Serious
2. **Getting Started**
   - Installing Serious
   - Writing Your First Program
   - Compiling and Running Code
3. **Language Syntax**
   - Variables, Constants, and Types
   - Expressions and Operators
   - Control Flow: Loops, Conditionals, and Functions
4. **Advanced Features**
   - Manual Memory Handling
   - Error Handling
   - Multi-threading and Parallelism
   - Interoperability and Linking
5. **Optimizations and Performance**
   - Ahead-Of-Time Compilation (AOT)
   - Assembly Optimizations
   - Performance-First Logic
6. **Best Practices and Security**
   - Writing Secure Code
   - Optimizing for Performance
   - Debugging and Error Handling
7. **Code Examples**
   - Hello World
   - Working with Functions
   - Working with Arrays and Lists
   - Writing a Simple Multithreaded Program
8. **Tools and Utilities**
   - Using the Serious Compiler
   - Linking External Libraries
   - Using the Serious Debugger
9. **Troubleshooting**
   - Common Issues and Fixes
   - Advanced Debugging Techniques
   - Error Codes and Suggested Fixes
10. **Conclusion**
    - Summary
    - Future Directions
    - Resources

---

### 1. **Introduction to Serious**

#### **What is Serious?**

**Serious** is a high-performance programming language that combines low-level control with high-level abstractions. It is designed to be efficient, fast, and secure, providing a unique blend of assembly-like performance and Python-like ease of use. **Serious** excels in areas where raw performance, security, and control over system resources are crucial.

**Key Features:**
- **Instruction-Oriented Paradigm**: Focus on specific, targeted instructions.
- **Explicit Dynamic Typing**: Variables can change types dynamically at runtime.
- **AOT Compilation**: Ahead-of-time compilation for performance optimization.
- **C++ Grammar with Python Semantics**: Familiar syntax with Python-like semantics.
- **Hexadecimal Inlining**: Supports inline hexadecimal code.
- **Manual Memory Handling**: Full control over memory allocation and deallocation.
- **Advanced Error Handling**: Intelligent error handling with suggestions.
- **Optimized for Parallelism**: Uses thread pools and load balancing for multithreading.

#### **System Requirements**
- **Operating System**: Windows 10/11 (x64)
- **Processor**: AMD Ryzen 3 or better
- **Memory**: 8GB RAM minimum
- **Disk Space**: 500MB free for the Serious compiler and associated tools
- **Dependencies**: GCC or Clang (for C++ interoperability), Bash (for automation), Python (for auxiliary scripts)

#### **Setting Up Serious**

1. **Download Serious**: 
   - Clone the official Serious repository from GitHub:
   ```
   git clone https://github.com/serious-lang/serious.git
   ```

2. **Install Dependencies**: 
   - Install GCC or Clang, Bash, and Python on your system.
   - Install CMake for building the Serious compiler:
   ```
   sudo apt install cmake
   ```

3. **Build the Compiler**:
   ```
   cd serious
   mkdir build
   cd build
   cmake ..
   make
   ```

4. **Verify Installation**:
   ```
   serious --version
   ```

---

### 2. **Getting Started**

#### **Installing Serious**

Once you’ve cloned the repository and built the compiler, you’re ready to write and compile your first program.

#### **Writing Your First Program**

Create a file named `hello_world.srs` with the following content:

```serious
// Hello World Program in Serious

func main() {
    print("Hello, World!")
}
```

#### **Compiling and Running Code**

To compile the program, run the following command:

```
serious hello_world.srs
```

This will generate an executable named `hello_world.exe`. To run it:

```
./hello_world.exe
```

---

### 3. **Language Syntax**

#### **Variables, Constants, and Types**

Serious supports both dynamic and static typing. Variables can change types during runtime.

- **Declaring a Variable**:
  ```serious
  let x = 10
  ```

- **Declaring a Constant**:
  ```serious
  const PI = 3.14159
  ```

- **Type Declarations**:
  ```serious
  let myString: String = "Hello"
  let myInt: Int = 42
  ```

- **Primitive Types**:
  - `Int`: Integer type
  - `Float`: Floating-point type
  - `String`: Text string
  - `Bool`: Boolean (true/false)

#### **Expressions and Operators**

Serious supports standard arithmetic and logical operators:

- **Arithmetic**: `+`, `-`, `*`, `/`, `%`
- **Logical**: `&&` (and), `||` (or), `!` (not)
- **Comparison**: `==`, `!=`, `<`, `>`, `<=`, `>=`

#### **Control Flow: Loops, Conditionals, and Functions**

- **Conditionals**:
  ```serious
  if (x > 10) {
      print("x is greater than 10")
  } else {
      print("x is less than or equal to 10")
  }
  ```

- **Loops**:
  ```serious
  while (x > 0) {
      x = x - 1
  }

  for (i in 0..10) {
      print(i)
  }
  ```

- **Functions**:
  ```serious
  func add(a: Int, b: Int): Int {
      return a + b
  }

  let result = add(3, 5)
  ```

---

### 4. **Advanced Features**

#### **Manual Memory Handling**

Serious allows developers to manually manage memory allocation, providing more control over how resources are used. This feature is especially useful for performance-critical applications, like embedded systems.

- **Allocating Memory**:
  ```serious
  let ptr = malloc(100)  // Allocate 100 bytes
  ```

- **Freeing Memory**:
  ```serious
  free(ptr)  // Free allocated memory
  ```

#### **Error Handling**

Serious has an advanced error-handling mechanism that combines exception handling with condition-based checks:

- **Try-Catch**:
  ```serious
  try {
      let result = 10 / 0  // This will throw an exception
  } catch (e) {
      print("Error: Division by zero")
  }
  ```

#### **Multi-threading and Parallelism**

Serious supports **multi-threading** with thread pools and **parallelism** for efficient task execution.

- **Creating a Thread**:
  ```serious
  let t = thread(func() {
      print("This runs in a separate thread")
  })
  ```

- **Synchronizing Threads**:
  ```serious
  let mutex = mutex()
  mutex.lock()
  // Critical section
  mutex.unlock()
  ```

---

### 5. **Optimizations and Performance**

#### **Ahead-Of-Time Compilation (AOT)**

Serious compiles your code ahead of time, producing optimized machine code that runs with minimal overhead. This ensures fast startup times and better runtime performance compared to interpreted languages.

#### **Assembly Optimizations**

Serious has built-in support for optimizing register allocation and function calls using **x64 assembly**, allowing developers to fine-tune the performance of their programs.

---

### 6. **Best Practices and Security**

- **Memory Safety**: Always ensure that memory is properly allocated and freed.
- **Use Thread Synchronization**: Avoid race conditions by using mutexes or other synchronization mechanisms.
- **Error Handling**: Always use the try-catch mechanism to handle potential errors gracefully.

---

### 7. **Code Examples**

#### **Hello World**

```serious
func main() {
    print("Hello, World!")
}
```

#### **Working with Functions**

```serious
func add(a: Int, b: Int): Int {
    return a + b
}

func main() {
    let result = add(3, 5)
    print(result)  // Prints 8
}
```

#### **Working with Arrays and Lists**

```serious
let myList = [1, 2, 3, 4]
myList.push(5)
print(myList)  // Prints [1, 2, 3, 4, 5]
```

#### **Writing a Simple Multithreaded Program**

```serious
func task() {
    print("Task is running in a separate thread")
}

func main() {
    let t = thread(task)
    t.join()  // Wait for the thread to finish
}
```

---

### 8. **Tools and Utilities**

- **Serious Compiler**: The main tool used to compile Serious code into executables.
- **Debugger**: Use the `serious-debug` command to debug Serious programs.
- **Linking External Libraries**: Use the `link` directive to link with external C++ or system libraries.

---

### 9. **Troubleshooting**

- **Error: "Undefined symbol"**:
   - Ensure that the correct external library is linked.
- **Error: "Memory leak detected"**:
   - Verify that all dynamically allocated memory is freed properly.

---

### 10. **Conclusion**

Serious is designed to be a versatile, high-performance language suitable for a wide range of applications, from system-level programming to high-level application development. By combining powerful optimizations, manual memory control, and secure coding practices, Serious empowers developers to write fast, efficient, and secure code.

To create a batch file that will automate all the steps for setting up the project, downloading dependencies, and resolving any missing components, we'll follow these tasks:

1. **Install necessary dependencies**.
2. **Clone any external repositories** (e.g., external libraries).
3. **Run CMake to generate build files**.
4. **Build the project using `make`**.
5. **Handle missing dependencies** (e.g., downloading and installing them).
6. **Add a custom logo/icon** for the project.
7. **Handle all setup in one file for simplicity**.

### Batch File (`setup_compiler.bat`)

```batch
@echo off
setlocal enabledelayedexpansion

:: Set the project root directory
set PROJECT_DIR=%CD%
set BUILD_DIR=%PROJECT_DIR%\build
set REPO_URL=https://github.com/youruser/yourrepository.git

:: Logo File and Icon Setup
set ICON_FILE=%PROJECT_DIR%\resources\eighleaux_logo.ico

:: Check for required dependencies (git, cmake, g++, make, libcurl)
echo Checking dependencies...

:: Check for Git
where git >nul 2>nul
if errorlevel 1 (
    echo Git is not installed. Installing Git...
    call :installGit
)

:: Check for CMake
where cmake >nul 2>nul
if errorlevel 1 (
    echo CMake is not installed. Installing CMake...
    call :installCMake
)

:: Check for g++
where g++ >nul 2>nul
if errorlevel 1 (
    echo g++ is not installed. Installing g++...
    call :installGpp
)

:: Check for make
where make >nul 2>nul
if errorlevel 1 (
    echo make is not installed. Installing make...
    call :installMake
)

:: Check for libcurl
where curl >nul 2>nul
if errorlevel 1 (
    echo libcurl is not installed. Installing libcurl...
    call :installLibCurl
)

:: Check for required icon/logo file
if not exist "%ICON_FILE%" (
    echo Eighleaux logo not found. Downloading logo...
    call :downloadLogo
)

:: Clone the repository if it does not exist
if not exist "%PROJECT_DIR%\yourrepository" (
    echo Cloning repository...
    git clone %REPO_URL% %PROJECT_DIR%\yourrepository
)

:: Go to the project directory
cd %PROJECT_DIR%\yourrepository

:: Run CMake to configure the project
if not exist "%BUILD_DIR%" mkdir "%BUILD_DIR%"
cd "%BUILD_DIR%"

echo Running CMake to configure the build...
cmake ..

:: Build the project using make
echo Building the project...
make

:: Add custom icon/logo to the executable (assuming Windows .exe output)
echo Adding Eighleaux logo to the executable...
call :addIconToExe "%PROJECT_DIR%\yourrepository\build\advanced_compiler.exe" "%ICON_FILE%"

echo Build and setup complete. Run the program using the 'advanced_compiler' executable in the build directory.

:: End script
endlocal
exit /b

:: Functions for installation of dependencies
:installGit
echo Installing Git...
:: You can change this for your system's preferred package manager or download method
choco install git
goto :eof

:installCMake
echo Installing CMake...
:: Install CMake via Chocolatey (Windows package manager)
choco install cmake
goto :eof

:installGpp
echo Installing g++...
:: Install g++ via Chocolatey (Windows package manager)
choco install mingw
goto :eof

:installMake
echo Installing make...
:: Install make via Chocolatey
choco install make
goto :eof

:installLibCurl
echo Installing libcurl...
:: Download libcurl from official site or use a package manager like choco
choco install curl
goto :eof

:downloadLogo
echo Downloading Eighleaux logo...
:: Download the logo using curl
curl -o "%ICON_FILE%" https://example.com/eighleaux_logo.ico
goto :eof

:addIconToExe
:: This function adds the custom icon/logo to the executable using a resource editor or command-line tool.
:: In this case, we can use a tool like ResourceHacker (https://www.angusj.com/resourcehacker/) to change the icon of the .exe file.
:: Make sure you have ResourceHacker installed and available in your PATH, or download it manually.

echo Adding icon to executable...
:: Assuming ResourceHacker is installed or present in the project directory
ResourceHacker.exe -open %1 -save %1 -action addoverwrite -res "%ICON_FILE%" -mask ICONGROUP,1,
goto :eof
```

### Explanation:

1. **Dependency Check and Installation**:
   - The batch file first checks if the required tools are installed (`git`, `cmake`, `g++`, `make`, `curl`).
   - If any of the dependencies are missing, it installs them using **Chocolatey** (a Windows package manager). You can adjust the installation commands to your preferred method (e.g., manually downloading installers).

2. **Cloning the Repository**:
   - If the repository is not already cloned, it will clone it into the `yourrepository` directory.

3. **Running CMake**:
   - The batch script creates a build directory (`build`), runs `cmake ..` to generate the necessary build files, and then builds the project using `make`.

4. **Adding the Eighleaux Icon**:
   - If the logo file (icon) doesn't exist in the `resources` folder, the batch file will download it from a URL. You need to replace `https://example.com/eighleaux_logo.ico` with the actual URL where the logo is hosted.
   - It uses **ResourceHacker** (a popular tool for modifying executable resources) to add the custom icon to the compiled executable. You can also use any other tool that supports this if needed.

5. **Error Handling**:
   - The script uses `where` to check if the necessary commands are available, and if they aren’t, it installs them via **Chocolatey**. This ensures a smooth setup without manual intervention.

### Required Tools and Setup:

1. **Chocolatey**: This batch file assumes **Chocolatey** is installed on your system for easy installation of dependencies. You can install Chocolatey by following [this link](https://chocolatey.org/install).
   
2. **Resource Hacker**: To modify the executable’s icon, download **Resource Hacker** (or any similar tool) and make sure it's in your `PATH` or available in the project directory. Resource Hacker can be downloaded [here](https://www.angusj.com/resourcehacker/).

3. **URL for Logo**: Make sure the logo for the Eighleaux theme is hosted somewhere publicly, or adjust the script to point to the correct file location.

### How to Run:

1. Place this batch file (`setup_compiler.bat`) in the root of your project directory.
2. Double-click the batch file to start the setup process.
3. The script will automatically handle the following:
   - Install missing dependencies.
   - Clone the repository.
   - Build the project with CMake and `make`.
   - Download the logo if it's missing.
   - Add the custom logo to the executable.

This should provide a fully automated environment to set up and build your project without requiring manual steps for dependency installation or setup.

